//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: opentelemetry/proto/collector/metrics/v1/metrics_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Service that can be used to push metrics between one Application
/// instrumented with OpenTelemetry and a collector, or between a collector and a
/// central collector.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceProvider: CallHandlerProvider {
  var interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceServerInterceptorFactoryProtocol? { get }

  /// For performance reasons, it is recommended to keep this RPC
  /// alive for the entire life of the application.
  func export(request: Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse>
}

extension Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceProvider {
  internal var serviceName: Substring {
    return Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Export":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest>(),
        responseSerializer: ProtobufSerializer<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse>(),
        interceptors: self.interceptors?.makeExportInterceptors() ?? [],
        userFunction: self.export(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Service that can be used to push metrics between one Application
/// instrumented with OpenTelemetry and a collector, or between a collector and a
/// central collector.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceServerInterceptorFactoryProtocol? { get }

  /// For performance reasons, it is recommended to keep this RPC
  /// alive for the entire life of the application.
  func export(
    request: Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Export":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest>(),
        responseSerializer: ProtobufSerializer<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse>(),
        interceptors: self.interceptors?.makeExportInterceptors() ?? [],
        wrapping: { try await self.export(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'export'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExportInterceptors() -> [ServerInterceptor<Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest, Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse>]
}

internal enum Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MetricsService",
    fullName: "opentelemetry.proto.collector.metrics.v1.MetricsService",
    methods: [
      Opentelemetry_Proto_Collector_Metrics_V1_MetricsServiceServerMetadata.Methods.export,
    ]
  )

  internal enum Methods {
    internal static let export = GRPCMethodDescriptor(
      name: "Export",
      path: "/opentelemetry.proto.collector.metrics.v1.MetricsService/Export",
      type: GRPCCallType.unary
    )
  }
}
